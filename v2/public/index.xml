<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>jeffhui.net</title>
    <link>http://localhost:1313/</link>
    <description>Recent content on jeffhui.net</description>
    <generator>Hugo -- 0.134.3</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 19 Sep 2024 16:28:34 -0700</lastBuildDate>
    <atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Toml Crash Course</title>
      <link>http://localhost:1313/writings/2024/toml-crashcourse/</link>
      <pubDate>Thu, 19 Sep 2024 16:28:34 -0700</pubDate>
      <guid>http://localhost:1313/writings/2024/toml-crashcourse/</guid>
      <description>&lt;h1 id=&#34;background&#34;&gt;Background&lt;/h1&gt;
&lt;p&gt;Since migrating this site to &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt;, I felt like it was finally time to
avoid learning TOML.&lt;/p&gt;
&lt;p&gt;This assumes you don&amp;rsquo;t know &lt;a href=&#34;https://toml.io/&#34;&gt;TOML&lt;/a&gt; but know other &lt;a href=&#34;https://www.json.org/&#34;&gt;data&lt;/a&gt;
&lt;a href=&#34;https://yaml.org/&#34;&gt;formats&lt;/a&gt;? Time to speedrun through.&lt;/p&gt;
&lt;h1 id=&#34;the-30-second-start&#34;&gt;The 30-second Start&lt;/h1&gt;
&lt;p&gt;You can think of toml as key value file format with namespace prefixes that
translate to JSON:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-toml&#34; data-lang=&#34;toml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# this is a comment&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;key&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;value&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;my-key-prefix&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;key2&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;value2&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;person&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;John&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Conceptually produces&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;key&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;value&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;my-key-prefix&amp;#34;&lt;/span&gt;: {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;key2&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;value2&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	},
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;person&amp;#34;&lt;/span&gt;: {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;John&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Dot-notation indicates a nested object. In the spec, TOML calls objects tables.&lt;/p&gt;</description>
    </item>
    <item>
      <title>check.statem: Generating Test Programs</title>
      <link>http://localhost:1313/2020/01-check.statem.html</link>
      <pubDate>Sun, 05 Jan 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2020/01-check.statem.html</guid>
      <description>&lt;p&gt;One of the most interesting parts of generative testing (aka
&lt;a href=&#34;https://hackage.haskell.org/package/QuickCheck&#34;&gt;QuickCheck&lt;/a&gt;). Is state machine testing. The original purpose I
built &lt;a href=&#34;http://github.com/jeffh/Fox&#34;&gt;Fox&lt;/a&gt; was to explore state machine testing. In particular, the talk
from John Hughes video was inspirational to exploring this further:&lt;/p&gt;



&lt;p&gt;
&lt;iframe class=&#34;center lit&#34; width=&#34;560&#34; height=&#34;315&#34;
src=&#34;https://www.youtube-nocookie.com/embed/zi0rHwfiX1Q&#34; frameborder=&#34;0&#34;
allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&#34;
allowfullscreen&gt;&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;In short, John makes a case: dynamically generating state machines to detect
errors that is more effective and economical than traditional example based
tests. There&amp;rsquo;s lots of work managing example based tests that can be better
solved with generative testing.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Reading Code – Assertions &amp; Assumptions</title>
      <link>http://localhost:1313/2016/23-reading-code.html</link>
      <pubDate>Wed, 31 Aug 2016 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2016/23-reading-code.html</guid>
      <description>&lt;p&gt;I&amp;rsquo;m fascinated by how engineers read and interpret code that they work on a
daily basis. It&amp;rsquo;s no doubt different for everyone, but few explain how they go
about and understand a unfamiliar codebase.&lt;/p&gt;
&lt;p&gt;For me, being comfortable in a codebase usually means two things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Being able to jump to relevant, related parts of the code.&lt;/li&gt;
&lt;li&gt;Understand the implications of changing a piece of code
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Inside the system&lt;/strong&gt; – impact of code quality. How does the code influence
code in the same project?&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Outside the system&lt;/strong&gt; – implications for human and program collaborators.
How does the code influence other projects, teams, or users?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Both can be addressed by following the data flow of the code. I refer to my
strategy as assertions and assumptions. Take this arbitrary
&lt;a href=&#34;https://github.com/django/django/commit/4bc6b939944183533ae74791d21282e613f63a96&#34;&gt;code snippet&lt;/a&gt;
from &lt;a href=&#34;https://github.com/django/django&#34;&gt;Django&lt;/a&gt;:&lt;/p&gt;</description>
    </item>
    <item>
      <title>What&#39;s Your Engineering Culture?</title>
      <link>http://localhost:1313/2016/22-whats-your-engineering-culture.html</link>
      <pubDate>Sun, 31 Jul 2016 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2016/22-whats-your-engineering-culture.html</guid>
      <description>&lt;p&gt;When evaluating companies, its utmostly important to learn about the engineering
culture. Culture for a company is simular to scope for code – culture provides a
context for getting work done.&lt;/p&gt;
&lt;p&gt;Companies advertise their culture, but note that each company has a different
culture. There&amp;rsquo;s plenty of articles about culture, so I won&amp;rsquo;t bother covering
that. Just remember they aren&amp;rsquo;t necessarily the same. Companies tend not to be
explicit about making sure their process matches what you expect. Be suspicious
for a company that can&amp;rsquo;t explain it&amp;rsquo;s culture because that just means they&amp;rsquo;re
not activitely trying to cultivate one. And that means it&amp;rsquo;s implicitly defined
by the leaders of the company. Even if they choose not to define it.&lt;/p&gt;</description>
    </item>
    <item>
      <title>TLDR Programming Concepts</title>
      <link>http://localhost:1313/2016/21-tldr-programming-concepts.html</link>
      <pubDate>Thu, 30 Jun 2016 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2016/21-tldr-programming-concepts.html</guid>
      <description>&lt;p&gt;Trying to concisely describe concepts is an interesting exercise. The ideal goal
is to build upon existing concepts, but as you add more concepts you run the
risk of being inconsistent.&lt;/p&gt;
&lt;p&gt;So with at most two sentences, I present a list of common programming concepts.
This goes without warning that lossy compression is inevitable.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Data&lt;/strong&gt;: Ones and zeros.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Values&lt;/strong&gt;: Meaningful data.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Types / Encodings&lt;/strong&gt;: Interpretations of values.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;State&lt;/strong&gt;: A value that changes over time. Usually also considered a Value.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Variables&lt;/strong&gt;: Names for values over time.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Collections&lt;/strong&gt;: A value that&amp;rsquo;s a a group of values of same type.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Structs&lt;/strong&gt;: A value that&amp;rsquo;s a group of values with possibly differing types.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Classes&lt;/strong&gt;: Structs with functions that have itself as the first argument.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Inheritance&lt;/strong&gt;: A concise way to implement a class by referring to part of
its implementation from one class.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Multiple Inheritance&lt;/strong&gt;: A class that inherits from multiple other classes.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Extensions&lt;/strong&gt;: Adding methods to a previously defined type.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Mixins&lt;/strong&gt;: Adding (Multiple) Inheritance to a previously defined type.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Interface / Protocols&lt;/strong&gt;: Inheritance of a class that has only functions that
should be implemented by the class that inherits it.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Traits&lt;/strong&gt;: Interfaces that may have function implementations.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Generics&lt;/strong&gt;: Treating a type as a variable. Allows algorithms independent of
specific types.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Type Classes&lt;/strong&gt;: Generic Interfaces.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Monad&lt;/strong&gt;: An interface defining the expected behavior for &lt;code&gt;map&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Functor&lt;/strong&gt;: An interface defining the expected behavior for &lt;code&gt;apply&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Pointers&lt;/strong&gt;: A value that indicates where to find another value. An home
address is a pointer to a home.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Big-O Notation&lt;/strong&gt;: A method to estimate the number of main-memory operations&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Slice&lt;/strong&gt;: A value that is a pointer and length into an existing collection&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Value Objects&lt;/strong&gt;: An struct / class with equality and hashCode semantics.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Object-Oriented Programming&lt;/strong&gt;: The concept of classes talking to each other
using value objects.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Procedure&lt;/strong&gt;: A sequence of operations to execute. Most programming languages
mean procedure when they say function.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Function&lt;/strong&gt;: Vaguely defined / blurred by current norms. See Procedure.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Pure Function&lt;/strong&gt;: A procedure that returns the same output for the same
inputs.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Side Effects&lt;/strong&gt;: Any observable state that occurs besides a return value.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Functional Programming&lt;/strong&gt;: The practice of using less state and more pure
functions.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Code&lt;/strong&gt;: A value that is a series of operations&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;AST (Abstract Syntax Tree)&lt;/strong&gt;: Hierarchy of typed code&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Program&lt;/strong&gt;: A collection of code that a computer that can execute.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Compiler&lt;/strong&gt;: Program that take code and produce programs.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Interpreter&lt;/strong&gt;: A program that executes code without producing a program.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Emulator&lt;/strong&gt;: A program that mimics the behavior of hardware.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Virtual Machine&lt;/strong&gt;: A computer emulator where the hardware may not actually
exist (eg - Java Virtual Machine).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Static&lt;/strong&gt;: Known at compile-time.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Dynamic&lt;/strong&gt;: Known at execution-time.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Type Checker&lt;/strong&gt;: A program that validates what types flowing through your
code.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Type Inference&lt;/strong&gt;: A compiler or interpreter feature can that deduce types
without always explicitly specifying it in code.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Optimization&lt;/strong&gt;: Writing code for the computer first, instead of humans.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Performance&lt;/strong&gt;: Turning memory operations for lower frequency, and higher
throughput.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Reference Counting&lt;/strong&gt;: Counting number of owners of a piece of memory to know
when to free it.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Garbage Collection&lt;/strong&gt;: An embedded program that frees another program&amp;rsquo;s
memory that is no longer being used.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Reflection&lt;/strong&gt;: Code that can inspect and/or modify itself as it&amp;rsquo;s executing.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Macros&lt;/strong&gt;: An operation that can be translated to a sequence of operations
before program execution.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;JIT (Just-In-Time) Compilation&lt;/strong&gt;: A feature of interpreters or emulators
that compiles code during its execution.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;The last concept pushes the limits of definitions this concise. Some interesting
implications result from these definitions:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Two Kinds of Abstractions</title>
      <link>http://localhost:1313/2016/20-two-kinds-of-abstractions.html</link>
      <pubDate>Tue, 31 May 2016 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2016/20-two-kinds-of-abstractions.html</guid>
      <description>&lt;p&gt;When someone talks about abstractions, they&amp;rsquo;re usually trying to make the
software more flexible. But that&amp;rsquo;s usually one of two kinds of abstractions.&lt;/p&gt;
&lt;h2 id=&#34;build-an-abstraction-to-_hide-an-implementation_&#34;&gt;Build an abstraction to &lt;em&gt;hide an implementation&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;Abstractions that hide implementations are more commonly touted as good designs.
&lt;a href=&#34;https://github.com/lostisland/faraday&#34;&gt;Ruby&amp;rsquo;s Faraday&lt;/a&gt; abstracts the specific HTTP library implementation.
Rails&amp;rsquo; &lt;a href=&#34;http://guides.rubyonrails.org/active_record_basics.html&#34;&gt;ActiveRecord&lt;/a&gt; abstracts the SQL you need to write to
interface with a relational database. The
&lt;a href=&#34;https://en.wikipedia.org/wiki/Data_mapper_pattern&#34;&gt;Data Mapper Pattern&lt;/a&gt; abstracts the persistent storage from
your application.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Design of Software Solutions</title>
      <link>http://localhost:1313/2016/19-design-of-software-solutions.html</link>
      <pubDate>Sat, 30 Apr 2016 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2016/19-design-of-software-solutions.html</guid>
      <description>&lt;p&gt;What&amp;rsquo;s the best way to model a solution? In software, there&amp;rsquo;s several common
ways of building solutions that solve specific problems. It&amp;rsquo;s worth trying to
identify their characteristics and the tradeoffs they make.&lt;/p&gt;
&lt;h2 id=&#34;architect-the-software-after-the-current-problem&#34;&gt;Architect the Software After the Current Problem&lt;/h2&gt;
&lt;p&gt;The easiest is way to model software. There&amp;rsquo;s no need to take in consideration
of future solutions the user made want.&lt;/p&gt;
&lt;p&gt;Sometimes this is what you need. If you&amp;rsquo;re writing a throw-away program, the
fastest possible way to implement it is to codify for the exact problem you&amp;rsquo;re
trying to solve. An example are most shell scripts. They tend to not be
abstracted and usually automate a very specific task.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Editing Text (Basics)</title>
      <link>http://localhost:1313/2016/18-editing-text-basics/</link>
      <pubDate>Thu, 31 Mar 2016 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2016/18-editing-text-basics/</guid>
      <description>&lt;h1 id=&#34;background&#34;&gt;Background&lt;/h1&gt;
&lt;p&gt;The problem seems simple: open, edit, and save text files. This can range from
JSON files to source code like every other editor.&lt;/p&gt;
&lt;p&gt;Turns out, this is a relatively difficult problem. The rise of
&lt;a href=&#34;https://atom.io&#34; title=&#34;Github Atom&#34;&gt;javascript&lt;/a&gt; &lt;a href=&#34;https://code.visualstudio.com/&#34; title=&#34;Microsoft Visual Studio Code&#34;&gt;text&lt;/a&gt; &lt;a href=&#34;http://brackets.io/&#34; title=&#34;Adobe Brackets&#34;&gt;editors&lt;/a&gt; surfaces the performance
problem of editing large text. It&amp;rsquo;s a non-trivial problem. There are several
desirable characteristics that editors want:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Editors need to &lt;strong&gt;optimize for edits&lt;/strong&gt;. Having immediate feedback for changes
is paramount to text editing. This includes editing large files.&lt;/li&gt;
&lt;li&gt;Editors need to &lt;strong&gt;optimize for reads&lt;/strong&gt;. This is implied for optimized edits so
that users can see immediate feedback to their edit. This also includes
support for large files.&lt;/li&gt;
&lt;li&gt;Editors should &lt;strong&gt;minimize memory usage&lt;/strong&gt;. Reduced overhead for storage of text
leaves more memory for more text buffers. This is useful for developers
editing multiple projects at once (eg - microservices).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Different data structures support these requirements in varying degrees of
success. For the sake of this article, I&amp;rsquo;m ignoring many other features editors
usually have:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Observation</title>
      <link>http://localhost:1313/2016/17-observation.html</link>
      <pubDate>Mon, 29 Feb 2016 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2016/17-observation.html</guid>
      <description>&lt;p&gt;The more you learn, the more this skill seems to be necessary. When missing a
bug or a refactor opportunity, I wonder how did I miss this? Sure, everyone
wants to learn from their mistakes. But noticing the little details gives you
the opportunity to adapt. Massive function definitions starts off looking like
an common pattern for code that needs to be refactored. Those dozen one-letter
variables names probably should be better named. Shadowing a variable is prone
to introduce errors in the future. All those mental notes form from being able
to observe it.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Modeling the Domain</title>
      <link>http://localhost:1313/2016/16-domain-modeling/</link>
      <pubDate>Sun, 31 Jan 2016 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2016/16-domain-modeling/</guid>
      <description>&lt;p&gt;Let&amp;rsquo;s mentally build an API for an an e-commerce site. Let&amp;rsquo;s say we&amp;rsquo;re tasked
with building the cart &amp;amp; checkout portion of the API. Building a RESTful API
seems like the natural choice. At first, a Cart seems like any other model
entity in the system. But what about an multi-page checkout step?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Allow partial updating of the Cart model (sounds like a job for PATCH). We
need to preserve as much information as possible on the server to allow the
user to pick up where they left off.&lt;/li&gt;
&lt;li&gt;Each update needs to be validated against the current known state of the
world. Store credit may not fully cover an order that has an upgraded shipping
method specified later on.&lt;/li&gt;
&lt;li&gt;The final cart has to be &amp;ldquo;commited&amp;rdquo; where final validations need to be
performed before commited.&lt;/li&gt;
&lt;li&gt;An finally, the committed cart requires taking to third party APIs all along
the way (shipping, credit card processing, tax calculations) as well as at the
commit point.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;REST doesn&amp;rsquo;t provide an easy way to model this.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Daily Processes Check-In</title>
      <link>http://localhost:1313/2015/15-daily-processes.html</link>
      <pubDate>Mon, 30 Nov 2015 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2015/15-daily-processes.html</guid>
      <description>&lt;p&gt;&lt;em&gt;Instead of sounding prescriptive, this article is much more descriptive.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m describing my regular workflows: what is working; what isn&amp;rsquo;t working. I&amp;rsquo;m
documenting this for completely selfish reasons since it&amp;rsquo;s useful to track
progression (if any). It happens to be a great inflection point since a recent
illness has thrown me off my routine in the past week.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Like most people, there&amp;rsquo;s a need to regularly do:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Respond to messages (twitter, facebook, texts)&lt;/li&gt;
&lt;li&gt;Respond to mail (physical, email)&lt;/li&gt;
&lt;li&gt;Attend events (birthdays, social gatherings, meetups)&lt;/li&gt;
&lt;li&gt;Capture ideas (they tend to come up in the most random places)&lt;/li&gt;
&lt;li&gt;Living (rent, bills, taxes, laundry, cleaning)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All while (attempting) to achieve other goals:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Going Fast by Going Slow</title>
      <link>http://localhost:1313/2015/14-going-fast-by-going-slow.html</link>
      <pubDate>Sat, 31 Oct 2015 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2015/14-going-fast-by-going-slow.html</guid>
      <description>&lt;p&gt;People always ask about how did you learn this or work so quickly doing that?
It&amp;rsquo;s a tough question to answer elegantly. And it&amp;rsquo;s a cop-out to vaguely say I
spent my free time looking into that particular topic. It&amp;rsquo;s a
socially-acceptable excuse.&lt;/p&gt;
&lt;p&gt;But no doubt that this requires time. The time spent learning comes from
somewhere, since we all only have 24 hours in a day for this. In our field,
there&amp;rsquo;s always time you must dedicate to learning to keep up to date.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Process is King</title>
      <link>http://localhost:1313/2015/13-Process-is-King.html</link>
      <pubDate>Wed, 30 Sep 2015 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2015/13-Process-is-King.html</guid>
      <description>&lt;p&gt;There&amp;rsquo;s a process behind every result.&lt;/p&gt;
&lt;p&gt;If you say, &amp;ldquo;we have no process, there&amp;rsquo;s no meetings&amp;rdquo;, then that&amp;rsquo;s your process.
Admitting to no process simply indicates that you don&amp;rsquo;t have it formalized. A
poorly defined process hurts. Processes enable efficiency and consistency. They
can also act like a communication protocol among team members, teams, and
organizations. Process can improve your quality.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s think about how you deploy an application. What does that process look
like? A poorly defined deployment process is inconsistent – something
undesirable for a deployment. At minimum, a quick checklist works:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Communicating as an Engineer</title>
      <link>http://localhost:1313/2015/12-communicating-as-an-engineer.html</link>
      <pubDate>Mon, 31 Aug 2015 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2015/12-communicating-as-an-engineer.html</guid>
      <description>&lt;p&gt;As an engineer, one of the most valuable skills you can have is to communicate
effectively. This applies both to your follow engineers as well as non-engineers
(PMs, designers, business). Obviously, this advice is generally applicable, but
many engineers don&amp;rsquo;t craft their communication to the business well. Common
problems are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Talking &lt;em&gt;too much&lt;/em&gt; about technical implementation.&lt;/li&gt;
&lt;li&gt;Talking &lt;em&gt;too little&lt;/em&gt; about technical implementation.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Too much technical implementation drowns out the important details that
businesses are concerned about. It drags on discussions and meetings
unnecessarily. Imagine if a designer talked for hours about how they picked the
correct border radius value and color for their buttons in a meeting. That&amp;rsquo;s a
waste of time for business stakeholders and engineers in that meeting. Getting
far into the weeds like that quickly wastes discussions or
meetings&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;1&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Mental Schemas</title>
      <link>http://localhost:1313/2015/11-mental-schemas.html</link>
      <pubDate>Thu, 30 Jul 2015 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2015/11-mental-schemas.html</guid>
      <description>&lt;p&gt;It is difficult to always be improving in the software industry. In creative
fields, many artists &lt;a href=&#34;https://youtu.be/ikAb-NYkseI?t=9m41s&#34;&gt;talk&lt;/a&gt; about
&lt;a href=&#34;http://www.goodreads.com/quotes/309485-nobody-tells-this-to-people-who-are-beginners-i-wish&#34;&gt;churn&lt;/a&gt;.
When starting out, there&amp;rsquo;s an enormous amount of work to produce to get better.
If you&amp;rsquo;re new, there&amp;rsquo;s a massive amount of bad code you need to write. That&amp;rsquo;s
OK, it&amp;rsquo;s necessary. But the rate of improvement decays as time progresses. As
your notoriety grows, you can no longer just crank out code to get better, how
can you preserve some rate of improvement? It feels like the rate of learning
looks like this:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Software as Bridges</title>
      <link>http://localhost:1313/2015/10-software-bridges.html</link>
      <pubDate>Mon, 29 Jun 2015 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2015/10-software-bridges.html</guid>
      <description>&lt;hr&gt;
&lt;p&gt;Software is always challenging to explain to non-engineers and having a metaphor
is valuable to explain complex concepts. Bridges happen to be a good analogy to
software. But the devil is always in the details.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;10-software-bridges/MillauBridge.jpg&#34; alt=&#34;Millau Viaduct&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;Any piece of software provides a benefit to its users. It&amp;rsquo;s similar to people
using bridges to cross rivers. As with bridges, many kinds of software can solve
the same problems.&lt;/p&gt;
&lt;p&gt;Some bridges support many cars and pedestrians which is analogous to a
high-throughput like a server that can support many users. Others are very nice
walkways with trees, a highly usable piece of software that supports only a few
users. Most of the time, users only see the bridge from the top. Like seeing
only the tip of an iceberg.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Seeking Simplicity</title>
      <link>http://localhost:1313/2015/09-seeking-simplicity.html</link>
      <pubDate>Sun, 03 May 2015 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2015/09-seeking-simplicity.html</guid>
      <description>&lt;p&gt;What is simple?&lt;/p&gt;
&lt;p&gt;Rich Hickey makes a good abstract definition, but it can be difficult to
translate to everyday code. I encourage you to
&lt;a href=&#34;http://www.infoq.com/presentations/Simple-Made-Easy&#34;&gt;watch that&lt;/a&gt; before
returning to this. I&amp;rsquo;ll still be here.&lt;/p&gt;
&lt;p&gt;Ok, let&amp;rsquo;s start at that definition. Hickey&amp;rsquo;s simplicity is the &lt;strong&gt;disentangling
of concerns&lt;/strong&gt;. It&amp;rsquo;s easy to convolute from what seems like straight-forward
statement.&lt;/p&gt;
&lt;p&gt;For example, a high-level example would be what domain-driven design proponents
argue for. Separate solving your problem domain from the machinery that you use
to solve it. Separate How from What or When.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Moving On</title>
      <link>http://localhost:1313/2015/08-moving-on.html</link>
      <pubDate>Wed, 15 Apr 2015 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2015/08-moving-on.html</guid>
      <description>&lt;p&gt;It&amp;rsquo;s a bittersweet end to a chapter. I&amp;rsquo;ve thoroughly enjoyed my time at Pivotal
Labs. I met a lot of great friends. I paired and talked with geniuses and
newcomers alike. And I&amp;rsquo;d recommend anyone with an opportunity to work at Labs to
take it immediately.&lt;/p&gt;
&lt;p&gt;I look back with great memories, shared termoil, and personal growth. As an
introvert, it was a boundary-expanded endevor: pair programming every day. I
learned the value of tests which is evident to most of the major open source
work I&amp;rsquo;ve contributed to. I&amp;rsquo;ve sharpened my mind by the discussions I&amp;rsquo;ve had
there.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Generative Testing</title>
      <link>http://localhost:1313/2015/07-Generative-Testing.html</link>
      <pubDate>Sat, 31 Jan 2015 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2015/07-Generative-Testing.html</guid>
      <description>&lt;p&gt;It&amp;rsquo;s no secret that I&amp;rsquo;ve been interested in testing. Most of the &lt;a href=&#34;https://github.com/pivotal/cedar&#34; title=&#34;Cedar - BDD for Objective-C&#34;&gt;work&lt;/a&gt;
&lt;a href=&#34;https://github.com/Quick/Quick&#34; title=&#34;Quick - BDD for Swift and Objective-C&#34;&gt;I&amp;rsquo;ve&lt;/a&gt; &lt;a href=&#34;https://github.com/Nimble/Nimble&#34; title=&#34;Nimble Matcher Library for Swift and Objective-C&#34;&gt;done&lt;/a&gt; are around example-based testing. While useful,
it&amp;rsquo;s interesting to look at other communities for inspiration. I&amp;rsquo;m specifically
fascinated in the functional programming community. Generative testing in
particular. It was popularized in the early 2000s by a famous implementation in
Haskell, &lt;a href=&#34;https://hackage.haskell.org/package/QuickCheck&#34;&gt;QuickCheck&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In short, generative testing is allows you specify properties your software
should have. Then the testing library &lt;em&gt;generates&lt;/em&gt; test cases. It&amp;rsquo;s an
alternative path the functional community has taken when it comes to testing.
This becomes evident since testing functional code becomes mostly boilerplate
management:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Parsing JSON in Objective-C - Part 2</title>
      <link>http://localhost:1313/2014/06-Parsing-JSON-in-Objective-C-Part-2.html</link>
      <pubDate>Sat, 08 Nov 2014 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2014/06-Parsing-JSON-in-Objective-C-Part-2.html</guid>
      <description>&lt;p&gt;&lt;em&gt;Note: This previously was on
&lt;a href=&#34;http://pivotallabs.com/parsing-json-objective-c-part-2/&#34;&gt;Pivotal Labs blog&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;In the &lt;a href=&#34;05-parsing-json-in-objective-c-part-1&#34;&gt;previous article&lt;/a&gt;, we used TDD to
parse JSON into our &lt;code&gt;Person&lt;/code&gt; model and refactored the code under test. In part
2, we&amp;rsquo;re going to refactor the code further to be more reusable and extendable.
All the code in this article will also be in the
&lt;a href=&#34;https://github.com/jeffh/ParsingJSON/&#34;&gt;same repository&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id=&#34;redesign&#34;&gt;Redesign&lt;/h1&gt;
&lt;p&gt;The refactorings in the previous article were fairly straightforward and
mechanical. Ultimately, we’ll need to break apart different concerns of this
code. One approach would be to start with some questions:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Parsing JSON in Objective-C - Part 1</title>
      <link>http://localhost:1313/2014/05-Parsing-JSON-in-Objective-C-Part-1.html</link>
      <pubDate>Fri, 24 Oct 2014 00:00:00 -0700</pubDate>
      <guid>http://localhost:1313/2014/05-Parsing-JSON-in-Objective-C-Part-1.html</guid>
      <description>&lt;p&gt;&lt;em&gt;This post was original written on the
&lt;a href=&#34;http://pivotallabs.com/parsing-json-in-objective-c&#34;&gt;Pivotal Labs Blog&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;JSON parsing is a frequent task for clients interfacing with any recent web API.
Those web services frequently vary in quality:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Is the API following a RESTful design pattern?&lt;/li&gt;
&lt;li&gt;Is it providing an object graph or just a single/collection of objects in the
JSON response?&lt;/li&gt;
&lt;li&gt;What are the data types of the fields being returned? Can they be relied upon?&lt;/li&gt;
&lt;li&gt;How much work are clients duplicating to work around the server (e.g. -
Performance, Business Logic, etc.)?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you have full control of the resulting API endpoints, then it is easy to
build or fix the API to your client’s specific needs. Controlling the incidental
complexity can be challenging for APIs you do not control, or which have to
support a variety of clients.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Reverse Engineering Objective-C</title>
      <link>http://localhost:1313/2014/03-reverse-engineering-objective-c.html</link>
      <pubDate>Sat, 26 Jul 2014 00:00:00 -0700</pubDate>
      <guid>http://localhost:1313/2014/03-reverse-engineering-objective-c.html</guid>
      <description>&lt;p&gt;Languages that have dynamic introspection provide powerful meta-programming
capabilities. This is generally done at runtime with additional memory used for
storing metadata - such as types and method signatures. But they also provide
the same power for people reverse engineering your code.&lt;/p&gt;
&lt;p&gt;Let’s look at Objective-C, a simple code snippet:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-objc&#34; data-lang=&#34;objc&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;@interface&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MyObject&lt;/span&gt; : &lt;span style=&#34;color:#a6e22e&#34;&gt;NSObject&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;@end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;@implementation&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MyObject&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    NSInteger _number;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- (&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;)&lt;span style=&#34;color:#a6e22e&#34;&gt;doSomething&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    _number&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    NSLog(&lt;span style=&#34;color:#e6db74&#34;&gt;@&amp;#34;The %@&amp;#34;&lt;/span&gt;, [self _doSomethingSpecial:_number]);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- (NSString &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#a6e22e&#34;&gt;_doSomethingSpecial:&lt;/span&gt;(NSInteger)number
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; [NSString stringWithFormat:&lt;span style=&#34;color:#e6db74&#34;&gt;@&amp;#34;Number: %d&amp;#34;&lt;/span&gt;, number];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;@end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Simple enough, but what if we don’t have the source? Let’s step back to how
Objective-C works…&lt;/p&gt;</description>
    </item>
    <item>
      <title>Adapting Binary Search</title>
      <link>http://localhost:1313/2014/02-adapting-binary-search.html</link>
      <pubDate>Fri, 25 Jul 2014 00:00:00 -0700</pubDate>
      <guid>http://localhost:1313/2014/02-adapting-binary-search.html</guid>
      <description>&lt;p&gt;It’s great to use classic algorithms to solve problems at hand. Take this
problem of ellipsis:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;For a given text. Fit the maximum number of words that fits in the given size,
append “… More” if there was truncation.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;No, &lt;code&gt;NSLineBreakModeTailTruncation&lt;/code&gt; will not work. We need different text.&lt;/p&gt;
&lt;p&gt;The näive solution would simply to cut a word one-by-one until it fits with a
custom ellipsis text:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-objc&#34; data-lang=&#34;objc&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;@implementation&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;NSString&lt;/span&gt; (CustomEllipsis)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- (NSString &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#a6e22e&#34;&gt;textThatFitsSize:&lt;/span&gt;(CGSize)size &lt;span style=&#34;color:#a6e22e&#34;&gt;ellipsisText:&lt;/span&gt;(NSString &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)text
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    CGSize infiniteSize &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; CGSizeMake(size.width, INFINITY);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    CGSize fullSize &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [text boundingRectWithSize:infiniteSize options:NSStringDrawingUsesFontLeading&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;NSStringDrawingUsesLineFragmentOrigin
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                              context:nil].size;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// if text fits
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (fullSize.height &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; size.height) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; text;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    NSString &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;finalString &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nil;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// if text doesn&amp;#39;t fit
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    NSMutableArray &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;words &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [[text componentsSeparatedByString:&lt;span style=&#34;color:#e6db74&#34;&gt;@&amp;#34; &amp;#34;&lt;/span&gt;] mutableCopy];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (fullSize.height &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; size.height) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        [words removeLastObject];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        finalString &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [words componentsJoinByString:&lt;span style=&#34;color:#e6db74&#34;&gt;@&amp;#34; &amp;#34;&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        finalString &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [finalString stringByAppendString:&lt;span style=&#34;color:#e6db74&#34;&gt;@&amp;#34;... MORE&amp;#34;&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        fullSize &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [modifiedString boundingRectWithSize:infiniteSize options:NSStringDrawingUsesFontLeading&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;NSStringDrawingUsesLineFragmentOrigin context:nil].size;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; finalString;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;@end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Run that in a table cell and you’ve got performance problems!&lt;/p&gt;</description>
    </item>
    <item>
      <title>Evaluating New Techonologies</title>
      <link>http://localhost:1313/2014/01-evaluating-technologies.html</link>
      <pubDate>Thu, 24 Jul 2014 00:00:00 -0700</pubDate>
      <guid>http://localhost:1313/2014/01-evaluating-technologies.html</guid>
      <description>&lt;p&gt;Every time you look at a new (or familiar) technology. You should ask: What are
the tradeoffs?&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s obvious to see the benefits of something - it&amp;rsquo;s generally advertised
everywhere. Everyone is always shouting the the pros of X.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;ldquo;X does Y easier&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&amp;ldquo;X does Y faster&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&amp;ldquo;X integrates with Y&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Pros tend to flood the internet way more than cons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;X makes Z harder&lt;/li&gt;
&lt;li&gt;X makes Z slower&lt;/li&gt;
&lt;li&gt;X locks you into Y&lt;/li&gt;
&lt;li&gt;X does Y, at the expense of Z&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These are harder to find. Especially when the library is relatively new. But you
can imagine based on how critical it is on your software stack.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Objective-C: Lazy Sequences</title>
      <link>http://localhost:1313/2014/04-objective-c-lazy-sequences.html</link>
      <pubDate>Mon, 07 Jul 2014 00:00:00 -0700</pubDate>
      <guid>http://localhost:1313/2014/04-objective-c-lazy-sequences.html</guid>
      <description>&lt;p&gt;Lazy data structures are a powerful abstraction can increase the readability of
your program while encouraging separation of concerns.&lt;/p&gt;
&lt;p&gt;What are they? Simply put, they are data structures that &amp;ldquo;realize&amp;rdquo; what they
contain when they&amp;rsquo;re needed (or right before they&amp;rsquo;re needed).&lt;/p&gt;
&lt;p&gt;What can you do with lazy data structures? How about a page-scraper that
paginates as needed:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# pseudocode&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;seed_url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://example.com/page/&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# generate a lazy list of urls:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# - http://example.com/page/1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# - http://example.com/page/2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# - etc.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;urls &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; lazy {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;yield&lt;/span&gt; seed_url &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; string(i)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# a lazy list of html pages&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pages &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; map(urls, fetchURLPageContents)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# a lazy list of list of links&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;links_per_page &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; map(pages, extractLinksFromHTML)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# flatten to just a lazy list of links&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;links &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; join(links_per_page)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# do stuff with links&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; link &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; links {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    record(link)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This creates a powerful abstract that separate tasks your program needs to get
done behind an implicit interface. The ending for loop doesn&amp;rsquo;t need to know that
those links came from multiple page fetches or the file system. If the loop
short-circuited, then it minimizes the number of unnecessary fetches.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Hi there, I&#39;m Jeff!</title>
      <link>http://localhost:1313/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/about/</guid>
      <description>&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/images/profile2.png&#34; alt=&#34;Photo&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m a software engineer passionate about software engineering - which is the
never-ending challenge of balance of perfection and shipping.&lt;/p&gt;
&lt;p&gt;In the past, I was a &lt;a href=&#34;https://pivotal.io/labs&#34;&gt;consultant&lt;/a&gt; working on iOS
applications using the C-family of languages and Swift. Clients ranged from
early stealth startups to Fortune 500 companies. In iOS, I&amp;rsquo;m probably best known
for work on &lt;a href=&#34;https://github.com/quick/nimble&#34;&gt;Nimble&lt;/a&gt; or
&lt;a href=&#34;https://github.com/pivotal/cedar&#34;&gt;Cedar&lt;/a&gt; or giving some talks in the early days
of Swift. Although, I&amp;rsquo;ve personally learned the most while making
&lt;a href=&#34;https://github.com/jeffh/Hydrant&#34;&gt;Hydrant&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
