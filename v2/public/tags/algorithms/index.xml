<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Algorithms on jeffhui.net</title>
    <link>http://localhost:1313/tags/algorithms/</link>
    <description>Recent content in Algorithms on jeffhui.net</description>
    <generator>Hugo -- 0.134.3</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 25 Jul 2014 00:00:00 -0700</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/algorithms/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Adapting Binary Search</title>
      <link>http://localhost:1313/2014/02-adapting-binary-search.html</link>
      <pubDate>Fri, 25 Jul 2014 00:00:00 -0700</pubDate>
      <guid>http://localhost:1313/2014/02-adapting-binary-search.html</guid>
      <description>&lt;p&gt;It’s great to use classic algorithms to solve problems at hand. Take this
problem of ellipsis:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;For a given text. Fit the maximum number of words that fits in the given size,
append “… More” if there was truncation.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;No, &lt;code&gt;NSLineBreakModeTailTruncation&lt;/code&gt; will not work. We need different text.&lt;/p&gt;
&lt;p&gt;The näive solution would simply to cut a word one-by-one until it fits with a
custom ellipsis text:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-objc&#34; data-lang=&#34;objc&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;@implementation&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;NSString&lt;/span&gt; (CustomEllipsis)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- (NSString &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#a6e22e&#34;&gt;textThatFitsSize:&lt;/span&gt;(CGSize)size &lt;span style=&#34;color:#a6e22e&#34;&gt;ellipsisText:&lt;/span&gt;(NSString &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)text
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    CGSize infiniteSize &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; CGSizeMake(size.width, INFINITY);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    CGSize fullSize &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [text boundingRectWithSize:infiniteSize options:NSStringDrawingUsesFontLeading&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;NSStringDrawingUsesLineFragmentOrigin
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                              context:nil].size;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// if text fits
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (fullSize.height &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; size.height) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; text;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    NSString &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;finalString &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nil;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// if text doesn&amp;#39;t fit
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    NSMutableArray &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;words &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [[text componentsSeparatedByString:&lt;span style=&#34;color:#e6db74&#34;&gt;@&amp;#34; &amp;#34;&lt;/span&gt;] mutableCopy];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (fullSize.height &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; size.height) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        [words removeLastObject];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        finalString &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [words componentsJoinByString:&lt;span style=&#34;color:#e6db74&#34;&gt;@&amp;#34; &amp;#34;&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        finalString &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [finalString stringByAppendString:&lt;span style=&#34;color:#e6db74&#34;&gt;@&amp;#34;... MORE&amp;#34;&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        fullSize &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [modifiedString boundingRectWithSize:infiniteSize options:NSStringDrawingUsesFontLeading&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;NSStringDrawingUsesLineFragmentOrigin context:nil].size;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; finalString;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;@end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Run that in a table cell and you’ve got performance problems!&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
