<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Objective-C on jeffhui.net</title>
    <link>http://localhost:1313/tags/objective-c/</link>
    <description>Recent content in Objective-C on jeffhui.net</description>
    <generator>Hugo -- 0.134.3</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 31 Jan 2015 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/objective-c/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Generative Testing</title>
      <link>http://localhost:1313/2015/07-Generative-Testing.html</link>
      <pubDate>Sat, 31 Jan 2015 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2015/07-Generative-Testing.html</guid>
      <description>&lt;p&gt;It&amp;rsquo;s no secret that I&amp;rsquo;ve been interested in testing. Most of the &lt;a href=&#34;https://github.com/pivotal/cedar&#34; title=&#34;Cedar - BDD for Objective-C&#34;&gt;work&lt;/a&gt;
&lt;a href=&#34;https://github.com/Quick/Quick&#34; title=&#34;Quick - BDD for Swift and Objective-C&#34;&gt;I&amp;rsquo;ve&lt;/a&gt; &lt;a href=&#34;https://github.com/Nimble/Nimble&#34; title=&#34;Nimble Matcher Library for Swift and Objective-C&#34;&gt;done&lt;/a&gt; are around example-based testing. While useful,
it&amp;rsquo;s interesting to look at other communities for inspiration. I&amp;rsquo;m specifically
fascinated in the functional programming community. Generative testing in
particular. It was popularized in the early 2000s by a famous implementation in
Haskell, &lt;a href=&#34;https://hackage.haskell.org/package/QuickCheck&#34;&gt;QuickCheck&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In short, generative testing is allows you specify properties your software
should have. Then the testing library &lt;em&gt;generates&lt;/em&gt; test cases. It&amp;rsquo;s an
alternative path the functional community has taken when it comes to testing.
This becomes evident since testing functional code becomes mostly boilerplate
management:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Parsing JSON in Objective-C - Part 2</title>
      <link>http://localhost:1313/2014/06-Parsing-JSON-in-Objective-C-Part-2.html</link>
      <pubDate>Sat, 08 Nov 2014 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2014/06-Parsing-JSON-in-Objective-C-Part-2.html</guid>
      <description>&lt;p&gt;&lt;em&gt;Note: This previously was on
&lt;a href=&#34;http://pivotallabs.com/parsing-json-objective-c-part-2/&#34;&gt;Pivotal Labs blog&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;In the &lt;a href=&#34;05-parsing-json-in-objective-c-part-1&#34;&gt;previous article&lt;/a&gt;, we used TDD to
parse JSON into our &lt;code&gt;Person&lt;/code&gt; model and refactored the code under test. In part
2, we&amp;rsquo;re going to refactor the code further to be more reusable and extendable.
All the code in this article will also be in the
&lt;a href=&#34;https://github.com/jeffh/ParsingJSON/&#34;&gt;same repository&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id=&#34;redesign&#34;&gt;Redesign&lt;/h1&gt;
&lt;p&gt;The refactorings in the previous article were fairly straightforward and
mechanical. Ultimately, we’ll need to break apart different concerns of this
code. One approach would be to start with some questions:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Parsing JSON in Objective-C - Part 1</title>
      <link>http://localhost:1313/2014/05-Parsing-JSON-in-Objective-C-Part-1.html</link>
      <pubDate>Fri, 24 Oct 2014 00:00:00 -0700</pubDate>
      <guid>http://localhost:1313/2014/05-Parsing-JSON-in-Objective-C-Part-1.html</guid>
      <description>&lt;p&gt;&lt;em&gt;This post was original written on the
&lt;a href=&#34;http://pivotallabs.com/parsing-json-in-objective-c&#34;&gt;Pivotal Labs Blog&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;JSON parsing is a frequent task for clients interfacing with any recent web API.
Those web services frequently vary in quality:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Is the API following a RESTful design pattern?&lt;/li&gt;
&lt;li&gt;Is it providing an object graph or just a single/collection of objects in the
JSON response?&lt;/li&gt;
&lt;li&gt;What are the data types of the fields being returned? Can they be relied upon?&lt;/li&gt;
&lt;li&gt;How much work are clients duplicating to work around the server (e.g. -
Performance, Business Logic, etc.)?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you have full control of the resulting API endpoints, then it is easy to
build or fix the API to your client’s specific needs. Controlling the incidental
complexity can be challenging for APIs you do not control, or which have to
support a variety of clients.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Reverse Engineering Objective-C</title>
      <link>http://localhost:1313/2014/03-reverse-engineering-objective-c.html</link>
      <pubDate>Sat, 26 Jul 2014 00:00:00 -0700</pubDate>
      <guid>http://localhost:1313/2014/03-reverse-engineering-objective-c.html</guid>
      <description>&lt;p&gt;Languages that have dynamic introspection provide powerful meta-programming
capabilities. This is generally done at runtime with additional memory used for
storing metadata - such as types and method signatures. But they also provide
the same power for people reverse engineering your code.&lt;/p&gt;
&lt;p&gt;Let’s look at Objective-C, a simple code snippet:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-objc&#34; data-lang=&#34;objc&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;@interface&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MyObject&lt;/span&gt; : &lt;span style=&#34;color:#a6e22e&#34;&gt;NSObject&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;@end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;@implementation&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MyObject&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    NSInteger _number;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- (&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;)&lt;span style=&#34;color:#a6e22e&#34;&gt;doSomething&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    _number&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    NSLog(&lt;span style=&#34;color:#e6db74&#34;&gt;@&amp;#34;The %@&amp;#34;&lt;/span&gt;, [self _doSomethingSpecial:_number]);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- (NSString &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#a6e22e&#34;&gt;_doSomethingSpecial:&lt;/span&gt;(NSInteger)number
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; [NSString stringWithFormat:&lt;span style=&#34;color:#e6db74&#34;&gt;@&amp;#34;Number: %d&amp;#34;&lt;/span&gt;, number];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;@end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Simple enough, but what if we don’t have the source? Let’s step back to how
Objective-C works…&lt;/p&gt;</description>
    </item>
    <item>
      <title>Adapting Binary Search</title>
      <link>http://localhost:1313/2014/02-adapting-binary-search.html</link>
      <pubDate>Fri, 25 Jul 2014 00:00:00 -0700</pubDate>
      <guid>http://localhost:1313/2014/02-adapting-binary-search.html</guid>
      <description>&lt;p&gt;It’s great to use classic algorithms to solve problems at hand. Take this
problem of ellipsis:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;For a given text. Fit the maximum number of words that fits in the given size,
append “… More” if there was truncation.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;No, &lt;code&gt;NSLineBreakModeTailTruncation&lt;/code&gt; will not work. We need different text.&lt;/p&gt;
&lt;p&gt;The näive solution would simply to cut a word one-by-one until it fits with a
custom ellipsis text:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-objc&#34; data-lang=&#34;objc&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;@implementation&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;NSString&lt;/span&gt; (CustomEllipsis)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- (NSString &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#a6e22e&#34;&gt;textThatFitsSize:&lt;/span&gt;(CGSize)size &lt;span style=&#34;color:#a6e22e&#34;&gt;ellipsisText:&lt;/span&gt;(NSString &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)text
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    CGSize infiniteSize &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; CGSizeMake(size.width, INFINITY);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    CGSize fullSize &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [text boundingRectWithSize:infiniteSize options:NSStringDrawingUsesFontLeading&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;NSStringDrawingUsesLineFragmentOrigin
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                              context:nil].size;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// if text fits
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (fullSize.height &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; size.height) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; text;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    NSString &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;finalString &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nil;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// if text doesn&amp;#39;t fit
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    NSMutableArray &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;words &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [[text componentsSeparatedByString:&lt;span style=&#34;color:#e6db74&#34;&gt;@&amp;#34; &amp;#34;&lt;/span&gt;] mutableCopy];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (fullSize.height &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; size.height) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        [words removeLastObject];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        finalString &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [words componentsJoinByString:&lt;span style=&#34;color:#e6db74&#34;&gt;@&amp;#34; &amp;#34;&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        finalString &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [finalString stringByAppendString:&lt;span style=&#34;color:#e6db74&#34;&gt;@&amp;#34;... MORE&amp;#34;&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        fullSize &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [modifiedString boundingRectWithSize:infiniteSize options:NSStringDrawingUsesFontLeading&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;NSStringDrawingUsesLineFragmentOrigin context:nil].size;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; finalString;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;@end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Run that in a table cell and you’ve got performance problems!&lt;/p&gt;</description>
    </item>
    <item>
      <title>Objective-C: Lazy Sequences</title>
      <link>http://localhost:1313/2014/04-objective-c-lazy-sequences.html</link>
      <pubDate>Mon, 07 Jul 2014 00:00:00 -0700</pubDate>
      <guid>http://localhost:1313/2014/04-objective-c-lazy-sequences.html</guid>
      <description>&lt;p&gt;Lazy data structures are a powerful abstraction can increase the readability of
your program while encouraging separation of concerns.&lt;/p&gt;
&lt;p&gt;What are they? Simply put, they are data structures that &amp;ldquo;realize&amp;rdquo; what they
contain when they&amp;rsquo;re needed (or right before they&amp;rsquo;re needed).&lt;/p&gt;
&lt;p&gt;What can you do with lazy data structures? How about a page-scraper that
paginates as needed:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# pseudocode&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;seed_url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://example.com/page/&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# generate a lazy list of urls:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# - http://example.com/page/1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# - http://example.com/page/2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# - etc.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;urls &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; lazy {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;yield&lt;/span&gt; seed_url &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; string(i)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# a lazy list of html pages&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pages &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; map(urls, fetchURLPageContents)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# a lazy list of list of links&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;links_per_page &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; map(pages, extractLinksFromHTML)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# flatten to just a lazy list of links&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;links &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; join(links_per_page)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# do stuff with links&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; link &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; links {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    record(link)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This creates a powerful abstract that separate tasks your program needs to get
done behind an implicit interface. The ending for loop doesn&amp;rsquo;t need to know that
those links came from multiple page fetches or the file system. If the loop
short-circuited, then it minimizes the number of unnecessary fetches.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
